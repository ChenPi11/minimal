--- hush.c.old	2024-05-09 22:26:42.067263640 +0800
+++ hush.c	2024-05-09 22:37:53.117201200 +0800
@@ -348,7 +348,6 @@
     )
 # include <malloc.h>   /* for malloc_trim */
 #endif
-#include <glob.h>
 /* #include <dmalloc.h> */
 #if ENABLE_HUSH_CASE
 # include <fnmatch.h>
@@ -3296,22 +3295,6 @@
  * existing files. Need to re-implement it.
  */
 
-/* Helper */
-static int glob_needed(const char *s)
-{
-	while (*s) {
-		if (*s == '\\') {
-			if (!s[1])
-				return 0;
-			s += 2;
-			continue;
-		}
-		if (*s == '*' || *s == '[' || *s == '?' || *s == '{')
-			return 1;
-		s++;
-	}
-	return 0;
-}
 /* Return pointer to next closing brace or to comma */
 static const char *next_brace_sub(const char *cp)
 {
@@ -3461,105 +3444,17 @@
  */
 static int perform_glob(o_string *o, int n)
 {
-	char *pattern, *copy;
-
-	debug_printf_glob("start perform_glob: n:%d o->data:%p\n", n, o->data);
-	if (!o->data)
-		return o_save_ptr_helper(o, n);
-	pattern = o->data + o_get_last_ptr(o, n);
-	debug_printf_glob("glob pattern '%s'\n", pattern);
-	if (!glob_needed(pattern)) {
-		/* unbackslash last string in o in place, fix length */
-		o->length = unbackslash(pattern) - o->data;
-		debug_printf_glob("glob pattern '%s' is literal\n", pattern);
-		return o_save_ptr_helper(o, n);
-	}
-
-	copy = xstrdup(pattern);
-	/* "forget" pattern in o */
-	o->length = pattern - o->data;
-	n = glob_brace(copy, o, n);
-	free(copy);
-	if (DEBUG_GLOB)
-		debug_print_list("perform_glob returning", o, n);
-	return n;
+	return o_save_ptr_helper(o, n);
 }
 
 #else /* !HUSH_BRACE_EXPANSION */
 
-/* Helper */
-static int glob_needed(const char *s)
-{
-	while (*s) {
-		if (*s == '\\') {
-			if (!s[1])
-				return 0;
-			s += 2;
-			continue;
-		}
-		if (*s == '*' || *s == '[' || *s == '?')
-			return 1;
-		s++;
-	}
-	return 0;
-}
 /* Performs globbing on last list[],
  * saving each result as a new list[].
  */
 static int perform_glob(o_string *o, int n)
 {
-	glob_t globdata;
-	int gr;
-	char *pattern;
-
-	debug_printf_glob("start perform_glob: n:%d o->data:%p\n", n, o->data);
-	if (!o->data)
-		return o_save_ptr_helper(o, n);
-	pattern = o->data + o_get_last_ptr(o, n);
-	debug_printf_glob("glob pattern '%s'\n", pattern);
-	if (!glob_needed(pattern)) {
- literal:
-		/* unbackslash last string in o in place, fix length */
-		o->length = unbackslash(pattern) - o->data;
-		debug_printf_glob("glob pattern '%s' is literal\n", pattern);
-		return o_save_ptr_helper(o, n);
-	}
-
-	memset(&globdata, 0, sizeof(globdata));
-	/* Can't use GLOB_NOCHECK: it does not unescape the string.
-	 * If we glob "*.\*" and don't find anything, we need
-	 * to fall back to using literal "*.*", but GLOB_NOCHECK
-	 * will return "*.\*"!
-	 */
-	gr = glob(pattern, 0, NULL, &globdata);
-	debug_printf_glob("glob('%s'):%d\n", pattern, gr);
-	if (gr != 0) {
-		if (gr == GLOB_NOMATCH) {
-			globfree(&globdata);
-			goto literal;
-		}
-		if (gr == GLOB_NOSPACE)
-			bb_die_memory_exhausted();
-		/* GLOB_ABORTED? Only happens with GLOB_ERR flag,
-		 * but we didn't specify it. Paranoia again. */
-		bb_error_msg_and_die("glob error %d on '%s'", gr, pattern);
-	}
-	if (globdata.gl_pathv && globdata.gl_pathv[0]) {
-		char **argv = globdata.gl_pathv;
-		/* "forget" pattern in o */
-		o->length = pattern - o->data;
-		while (1) {
-			o_addstr_with_NUL(o, *argv);
-			n = o_save_ptr_helper(o, n);
-			argv++;
-			if (!*argv)
-				break;
-		}
-	}
-	globfree(&globdata);
-	if (DEBUG_GLOB)
-		debug_print_list("perform_glob returning", o, n);
-	return n;
+	return o_save_ptr_helper(o, n);
 }
 
 #endif /* !HUSH_BRACE_EXPANSION */
